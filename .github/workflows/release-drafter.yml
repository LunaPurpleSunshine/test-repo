name: Release Drafter

on:
  workflow_dispatch:
  push:
    # branches to consider in the event; optional, defaults to all
    branches:
      - master
  # pull_request event is required only for autolabeler
  # pull_request:
  #   # Only following types are handled by the action, but one can default to all as well
  #   types: [opened, reopened, synchronize]
  # pull_request_target event is required for autolabeler to support PRs from forks
  # pull_request_target:
  #   types: [opened, reopened, synchronize]
  schedule:
    - cron: '0,30 16-21 * * 0'

permissions:
  contents: read

jobs:
  update_release_draft:
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      # (Optional) GitHub Enterprise requires GHE_HOST variable set
      #- name: Set GHE_HOST
      #  run: |
      #    echo "GHE_HOST=${GITHUB_SERVER_URL##https:\/\/}" >> $GITHUB_ENV

      # Drafts your next Release notes as Pull Requests are merged into "master"
      - name: Create Draft Release
        id: create_release
        uses: release-drafter/release-drafter@v5
        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
        # with:
        #   config-name: my-config.yml
        #   disable-autolabeler: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Release
        id: publish_release
        # Only run this job on the scheduled cron job, not on pushes or PRs
        if: github.event_name == 'schedule'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if there is a draft release and exit if not
          draft=$(gh release view ${{ steps.create_release.outputs.tag_name }} --json isDraft --jq '.isDraft' --repo ${{ github.repository }})
          if [ "$draft" != "true" ]; then
            echo "No draft release to publish"
            exit 0
          fi
          # Check if the body contains "No changes" and exit if so
          body=$(${{ steps.create_release.outputs.body }})
          if [ "$body" == *"No changes"* ]; then
            echo "No changes to publish"
            exit 0
          fi
          # Publish the release
          echo "Publishing draft release ${{ steps.create_release.outputs.tag_name }}"
          gh release edit ${{ steps.create_release.outputs.tag_name }} --draft=false --repo ${{ github.repository }}
