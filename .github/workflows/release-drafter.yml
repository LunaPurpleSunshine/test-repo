name: Release Drafter

on:
  workflow_dispatch:
    inputs:
      publish:
        type: boolean
        required: true
        default: false
        description: "Publish a new release"

  push:
    # branches to consider in the event; optional, defaults to all
    branches:
      - master
  # pull_request event is required only for autolabeler
  # pull_request:
  #   # Only following types are handled by the action, but one can default to all as well
  #   types: [opened, reopened, synchronize]
  # pull_request_target event is required for autolabeler to support PRs from forks
  # pull_request_target:
  #   types: [opened, reopened, synchronize]
  # schedule:
  #   - cron: '0 9 * * 1'

permissions:
  contents: read

jobs:
  update_release_draft:
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_release.outputs.tag_name }}
      body: ${{ steps.create_release.outputs.body }}

    steps:
      # (Optional) GitHub Enterprise requires GHE_HOST variable set
      #- name: Set GHE_HOST
      #  run: |
      #    echo "GHE_HOST=${GITHUB_SERVER_URL##https:\/\/}" >> $GITHUB_ENV

      # Drafts your next Release notes as Pull Requests are merged into "master"
      - name: Create Draft Release
        id: create_release
        uses: release-drafter/release-drafter@v5
        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
        # with:
        #   config-name: my-config.yml
        #   disable-autolabeler: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_release:
    # Only run this job on the scheduled cron job, not on pushes or PRs
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish == 'true')
    needs: update_release_draft
    runs-on: ubuntu-latest
    permissions:
      contents: write  # for gh actions to create a release
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Check Release
        id: check_release
        run: |
          echo "${{ needs.update_release_draft.outputs.body }}" >> ./body.txt
          # Check if there is a draft release and exit if not
          draft=$(gh release view ${{ needs.update_release_draft.outputs.tag_name }} --json isDraft --jq '.isDraft' --repo ${{ github.repository }})

          do_release_check=false
          if [ "$draft" != "true" ]; then
            echo "No draft release to publish"
            do_release_check=false
            # Check if the body contains "No changes" and exit if so
          elif [ "$(cat ./body.txt | grep -c "No changes")" != "0" ]; then
            echo "No changes to publish"
            do_release_check=false
          else
            do_release_check=true
          fi
          echo "do_release=$do_release_check"
          echo "do_release=$do_release_check" >> $GITHUB_OUTPUT

      - name: Publish Release
        id: publish_release
        if: ${{ steps.check_release.outputs.do_release == 'true' }}
        run: |
          echo "Publishing draft release ${{ needs.update_release_draft.outputs.tag_name }}"
          gh release edit ${{ needs.update_release_draft.outputs.tag_name }} --draft=false --repo ${{ github.repository }}
